
	
	
		
Nomenclature
I. Introductionodern air transportation systems involve some of the most complex and challenging multi-disciplinary technical challenges of the age.In recognition of these challenges, a multi-faceted research and development effort is underway to realize the Next-Generation Air Transportation System (NextGen) 1 , intended to accommodate the projected growth in the demand for air transportation and to achieve increased efficiency in the effective use of the airspace and Air Traffic Control (ATC) resources.As part of its research and development efforts to help address NextGen, the National Aeronautics and Space Administration (NASA) is involved in carrying out foundational research and technology development to extend the state of the art in Air Traffic Management (ATM) using aeronautics engineering, computer science, software engineering, applied physics, mathematics, human factors, and automation design 2 .Given a nontrivial computational problem that we would like to solve, it is often useful to understand its various characteristics.One of the fundamental characteristics of a problem is its computational complexity.Understanding a problem's computational complexity is an important step in the quest for devising efficient and effective algorithmic solutions for the problem.Computational complexity is the study of the inherent difficulty of solving problems, and M Downloaded by NASA AMES RESEARCH CENTER on July 6, 2017 | http://arc.aiaa.org| DOI: 10.2514/6.2017-3775provides techniques for relating new problems to the pool of problems that have been characterized before.Graph theory provides a versatile and powerful mathematical abstraction for expressing, maintaining, testing, qualifying, quantifying, and reasoning about various characteristics, relationships, hypotheses, and queries among interacting objects or components comprising a complex system.The versatility of graph theory has enabled its successful application to a wide variety of technical problems in a multitude of fields in science and technology, from physics to chemistry to biology, and from manufacturing to transportation to marketing, and beyond.In this work, we advance the idea that Air Traffic Management (ATM) is ripe with a multitude of complex technical problems that can be formulated as graph problems.Thus, we argue that the ATM research community can benefit greatly from the wealth of knowledge and techniques developed in (a) graph theory to solve various graph theoretic problems, and (b) the theory of computational complexity that is devoted to studying and classifying computational problems according to their inherent difficulty.To illustrate this, we use graph theory to investigate three different problems arising in ATM.First, it is shown that the Airspace Sectorization Problem and the related Sector Combination Problem to optimize the airspace and the ATC resources are NP-hard, in general under several simple workload models.This is done by establishing a polynomial reduction from an NP-hard graph partitioning problem.Second, it is shown that for any fixed e > 0, the problem of finding a feasible scheduling solution to the traffic flow management problem with n aircraft in the problem instance, that is guaranteed to be within n 1-e of the optimal solution is NP-hard.This is done by establishing a polynomial time reduction from the maximum independent set problem in graphs that is also known not to be approximable.Finally, a problem arising in precision arrival scheduling is formulated and solved using graph reachability.While the results of our investigation in each of these problems is useful on its own merits, the unifying theme and the underlying purpose of presenting them in this work has been i) to invite the ATM research and development community to familiarize itself better with graph theoretic ideas and the theory of computational complexity, and ii) to provide examples illustrating how this can lead to new insights and/or efficient algorithmic solutions for problems arising in ATM.Basic familiarity with key concepts and notation in graph theory 3,4 and the theory of computational complexity 5, 6 is assumed.A refresher on these concepts, sufficient for understanding the material in this paper, is provided in the appendix.The reader is encouraged to consult references for more detailed and thorough discussion on these subjects.The rest of this paper is organized as follows.Sections II, III, and IV each focuses on one of the three ATM problems that were investigated and present the corresponding results.The paper continues in section V with additional remarks and discussion on some of the underlying purposes and unifying themes of this work, and some suggestions on why, when, and how to make better use of graph theory and the theory of computational complexity in tackling ATM problems.The paper concludes with section VI which provides a summary of the technical contributions and lists some related open problems.
II. Airspace Sectorization ProblemDynamic Airspace Configuration (DAC) 7,8 is a NextGen technical area primarily concerned with optimal strategic organization and dynamic tactical reallocation of the airspace and ATC resources.The Airspace Sectorization Problem (ASP) [9][10][11][12][13][14][15][16][17] is the problem of partitioning the airspace into sectors in such a way as to minimize or balance the controller workload in each sector by allowing sufficient room in the airspace for the controllers to handle and accommodate planned activities and unplanned disturbances (such as flight schedule changes, bad weather conditions, etc.) in a safe and timely fashion.Researchers and practitioners have introduced metrics such as sector capacity 15 , monitor alert parameter [18][19] , dynamic density [20][21][22] , simplified dynamic density 16 , and have used these to monitor, measure and analyze the workload and/or to compare the result of different airspace sectorization algorithms.Basu, Mitchell and Sabhnany 15 showed that under a specific workload model, ASP is NP-hard if the sector boundaries are constrained to axis-aligned rectangles.We extend their result to arbitrary shape sectors and under additional workload models, even if the flight trajectories or their projection onto the two-dimensional plane is a planar graph with maximum vertex degree six.
A. Problem FormulationIn general, ASP can be formulated in the n-dimensional Euclidean space R n .In practice, we are typically working either in R 3 (x, y, t) or R 4 (x, y, z, t), where x, y, z represent the spatial dimensions and t represents time.In the rest of the paper, we will use R 3 for simplicity and will generalize the results to higher dimensions as appropriate.The problem instance includes the airspace A, which is a closed sub-space of R 2 (x, y), and a set F of flight trajectories inside A, where each trajectory is a curve in R 3 (x, y, t) signifying the prescribed path traveled by an aircraft in the space-time.Generally, two flavors of the problems are of interest: min-workload (ASP MW ) and min-sector (ASP MS ).In both the min-workload and the min-sector formulations, the exact definition of the workload function depends on the workload model or workload metric being used.Some simple examples of workload model include:m 1 (F, s i ) = Total # of flights that intersect s i (1) m 2 (F, s i ) = # of flights simultaneously present in s i (2) m 3 (F, s i ) = # of
flights present in any time interval of fixed duration d in s i(3) m 4 (F, s i ) = Total # of intersections between the boundary of sector s i and the flight trajectories in F (4)m 5 (F, s i ) = a.m 1 (F, s i ) + b.m 4 (F, s i )(linear combinations of workload models m 1 and m 4 )More complicated workload models can be formed.As an example, the workload model m 5 (F, s i ) above, is defined as a linear combination of m 1 (F, s i ) and m 4 (F, s i ) to account for both the workload associated with safe separation of flights inside the sector (m 1 (F, s i )) as well as the coordination workload associated with flights crossing the sector boundary (m 4 (F, s i )).Other examples of more sophisticated characteristics used to define workload can be found in the literature for dynamic density metric [20][21][22] .We can combine the min-workload and min-sector formulation into one decision problem, denoted ASP D (m), with an instance (A, F, c s , c w ), where m represents the workload model.The problem seeks to determine whether there exists a sectorization of the airspace A into c s or fewer sectors such that the workload for each sector (under the workload model m) is no more than c w .An airspace sectorization is called feasible (or c w -feasible) if it meets the maximum workload constraint.Therefore, in the ASP D (m) problem, we seek to determine if there exists a c w -feasible sectorization of the airspace into c s or fewer sectors.This problem relaxes into its min-sector or min-workload versions if the maximum workload or the maximum sector count constraining factor is missing (e.g., set to infinity), respectively, while the objective is to minimize the remaining factor.
B. Previously Known Results on the Computational Complexity of ASPBasu, Mitchell and Sabhnany 15 , used sector capacity as workload metric, which they defined as the number of aircraft present simultaneously in a sector (equivalent to m 2 (F, s i ) defined in Eq. (1).)They showed the following: 15 Theorem 1.The 2D version of ASP MS (m 2 ) can be solved exactly in worst-case (deterministic) time O(kn log 2 n), where k is the optimal number of sectors in the problem instance and n is the number of flight trajectories in the problem instance.The problem can be solved in O(kn log n) expected time using a randomized algorithm. 15Theorem 2. The 2D version of ASP MW (m 2 ) can be solved exactly in worst-case (deterministic) time O(kn log 3
n).The problem can be solved in O(kn log 2 n) expected time using a randomized algorithm. 15Theorem 3. The 3D version of ASP MS (m 2 ) and ASP MW (m 2 ) are NP-hard if we restrict the solution space to those sectorizations in which each sector is an axis-aligned rectangle.In general, restricting the solution space of a problem can have different impacts.It can turn an easy problem into one that is intractable, or it can turn an intractable problem into one that can be solved optimally in deterministic polynomial time, or it might not change the computational complexity class of the problem.This might be somewhat counter-intuitive.It may seem that a restriction resulting in a drastic reduction on the size of the solution space would make the problem easier to solve.This s not necessarily the case, because the inherent difficulty of a problem is generally determined by the interaction of several factors, including the size, form and the structure of the solution space, as well as whether and how the problem characteristics may be used to navigate the solution space to home-in on an optimal solution.Since it is not clear how the axis-aligned restriction on the shape of the sectors would impact the computational complexity of the airspace sectorization problem, one cannot readily assume that the sectorization problem under workload model m 2 remains NP-hard in three or more dimensions, in general, if the restricted version is NP-hard.
C. Our Results on the Computational Complexity of ASPIn this section, we investigate the computational complexity of ASP D , in general, for the workload models defined in Eqs.(1) through (5), when the sectors are allowed to take arbitrary shapes and orientations and thus are not required to be axis-aligned rectangles.We show that under most of these workload models, the problem is NP-complete.To prove ASP D is NP-complete under a given workload model, we establish a polynomial time reduction from PLANAR-P3 (6), which is a restricted form of Planar 3-Dimensional Matching 23 (PLANAR-3DM).Under this restriction, each vertex in the planar graph constituting the problem instance is connected to no more than six other vertices.Establishing this reduction essentially proves that ASP D has immense expressive power.In essence, this proves that ASP D can express an arbitrary problem in NP, even the hardest ones among them.This shows solving ASP D in polynomial time is tantamount to solving an arbitrary problem in NP in polynomial time, thus proving that under the given workload model, ASP D is NP-complete, and hence the optimization versions of the problem (ASP MS and ASP MW ) are NP-hard.In PLANAR-P3(6), given a planar graph G = (V, E) with maximum edge degree six, we seek to determine if there exists a proper partition of V into subsets V 1 , V 2 , . .., V n such that "iÎ{1, 2, …, n}, G Vi , the subgraph induced by V i , forms a triangle.That is, G Vi is a graph with three vertices, where each vertex is connected to the other two.Dyer and Frieze 23 showed among other things that PLANAR-P3( 6) is NP-complete.It is clear that an instance G=(V, E) of PLANAR-P3( 6) is trivially solvable with a NO answer, if the number of vertices in V is not a multiple of 3. So, the hard instances of PLANAR-P3(6) are among those wherein the number of vertices is a multiple of 3, that is |V|=3n for some positive integer n.Let G = (V, E) be an arbitrary instance of PLANAR-P3(6) wherein n = | V | / 3 is an integer.Construct an instance I = (A, F, c s , c w ) of ASP D (m 1 ) as follows (see Fig. 1):1) A: Since G is planar, it can be embedded in the plane such that there are no edge intersections (except at the vertices incident on the edges).Consider a planar embedding of G = (V, E) as shown in Fig. 1(a).Create another planar graph G ¢, which we will call the adjoint graph of G.The new planar graph G ¢ is obtained from G by expanding each vertex vÎV into a face j v in G ¢ such that two faces j u , j v share an edge in G ¢ if and only if their corresponding vertices in V share and edge, that is, (u, v) Î E. An example of going from graph G to the adjoint graph G ¢ is shown in Fig. 1.The area captured by the faces of the adjoint graph G ¢ forms the airspace A in our ASP D (m 1 ) instance.2) F: To begin with, let F=AE.Then proceed as follows: i.For each edge e=(u, v) in E, create a flight trajectory f e that is completely contained inside the faces j u and j v , originates at u, and terminates at v. Let F = F È f e .The flight trajectories created in this step are referred to as the edge-flight trajectories.ii.Note that, by definition, each vertex vÎV in the given PLANAR-P3(6) instance is connected to no more than 6 edges.This means that the number of flight trajectories created in step (i) above that intersect (originate or terminate at) a vertex vÎV is at most 6.However, some vertices might connect to fewer than 6 edges.We would like to ensure additional flight trajectories are created per vertex (as needed), so that we have exactly 6 flight trajectories (including those generated in step i) originating or terminating at each of the vertices vÎV.Therefore, for each vertex vÎV that is connected to j edges with j < 6, we will create an additional (6 -j) flight trajectories.These flights originate at vertex v and terminate at some location inside the corresponding face j v .Let's call these the complementary flight trajectories for vertex v, and denote them as f c1 (v), . .., f c6 -j(v).Extend F by adding these flight trajectories to it.That is, let: 3) Let c s = n and c w = 15.We have thus completed constructing the ASP D (m 1 ) instance I = (A, F, c s , c w ).F = F È { f c1 (v). . ., f c6 -j(v)}.We will show that the answer to the given instance G=(V, E) of PLANAR-P3( 6) instance is YES if and only if the answer to the constructed instance I = (A, F, c s , c w ) of ASP D (m 1 ) is YES.In other words: A,F,c s ,c w ) of ASP D (m 1 ), the airspace A can be partitioned into c s =n sectors each with workload no more than c w =15.Lemma 4. In the PLANAR-P3(6) instance G=(V, E), the vertex set V can be partitioned into V 1 , V 2 , . . ., V n such that G Vi , the subgraph induced by V i ,
forms a triangle if and only if in the constructed instance I = (Proof: (IF): Assume there exists a partition V 1 , V 2 , …, V n of the vertex set V such that i Î {1, 2, …, n}, |V i | = 3,and G Vi , the subgraph induced by vertices in V i , forms a triangle.Let S = {s 1 , s 2 , ..., s n }, with s i = j i1 È j i2 È j i3 , where j ij is the face in the adjoint graph G¢ containing vertex v ij .Note that at this point, the union of the sectors in S covers all of A. Note that s i = j i1 È j i2 È j i3 is a contiguous sector in the airspace A since G and G¢ are both planar graphs, and G Vi forms a triangle.Furthermore, for j Î {1, 2, 3}, each of the faces j ij intersects exactly 6 flight trajectories.These are the flight trajectories originating or terminating at vertex v ij .However, since v i1 , v i2 , v i3 form a triangle, there is one flight that is shared between each pair of these vertices.In other words, each of the sectors s i defined above intersects no more than (6-1)´3 =15 flight trajectories.Thus, S = {s 1 , s 2 , ..., s n } is a feasible sectorization of the airspace with exactly c s = n sectors, where each sector has workload c w =15 under workload model m 1 .Thus, the answer to the constructed instance I = (A, F, c s , c w ) of ASP D (m 1 ) is YES.(ONLY IF): Conversely, assume there exists a contiguous partitioning S={s 1 , s 2 , ...} of the airspace A into n or fewer sectors such that each sector intersects no more than 15 flight trajectories in F. It is easy to see that the only way this can happen is for each sector to contain exactly three vertices that are pairwise connected in G, thus collectively contributing a total of exactly 15 to the workload of the sector.Take any sector s i Î S. Let v i1 , v i2 , v i3 denote the three vertices in s i , and letV i ={ v i1 , v i2 , v i3 }. It is clear that G Viis a triangle, meaning each pair of the three vertices in V i is connected by an edge in E. In other words, the answer to the PLANAR-P3(6) on instance G=(V,E) is YES.g Lemma 4 proves ASP D (m 1 ) is NP-complete, in general in three dimensions.To extend the result to higher dimensions, we note that the 3-dimensional (3D) version of the airspace sectorization problem is a restricted case of the 4D and above, in the sense that each 3D instance can also be considered a 4D, 5D, … instance with the values of the parameters along all entities at dimensions four or above are set to zero.Therefore, the ASP D (m 1 ) problem is NPcomplete in any dimension higher than three as well.In other words: Corollary 5. ASP D (m 1 ) is NP-complete, in general in three or more dimensions.Note that at no time in the proof of Lemma 4 did we use the flight time spans or durations.It is straightforward to see that by setting the flight time spans appropriately, we can extend the proof of Lemma 4 to workload models m 2 , m 3 , defined in Eqs. ( 2), (3).Also, note that the construction presented in the proof can be done in such a way that the flight trajectories in the problem instance do not intersect one another at any point other than at their origin and termination points.This is because the vertices in the adjoint graph could be considered area objects as opposed to point objects, without posing any problems in the proof; thus, we have the following: Corollary 6.The ASP D (m) remains NP-complete under the workload models m 1 , m 2 , m 3 , defined in Eqs. ( 1), ( 2), (3), even when the flight trajectories (or their projection onto the two-dimensional plane) form a plane graph of maximum vertex degree six.Earlier, we noted that more complicated workload models can be formed by combining simpler workload models, and provided as an example m 5 , defined in Eq. ( 5), as a linear combination of m 1 and m 4 , where constant factors a and b were used for setting the relative contribution of m 1 and m 4 (corresponding to the workload internal to the sector and the workload due to coordination effort of aircraft transitioning from one sector to another) to the overall workload m 5 .Note that if b is set to zero, then the workload model m 5 would be effectively equivalent to m 1 .This, together with Corollary 4 shows the following:  1), ( 2), (3), and ( 5) respectively) in three or more dimensions are NP-complete even when the flight trajectories (or their projection onto the two-dimensional plane) form a planar graph of maximum vertex degree six.Note that Theorem 7 does not say anything about the difficulty of workload model m 4 , defined in Eq. 4.Under this model, the workload for a sector is defined as the total number of intersections between flight trajectories and the boundary of the sector.This quantity can be thought of as the coordination workload between a sector and the adjacent sectors when aircraft are exiting one sector and entering an adjacent one.However, it is easy to see that a trivial solution to the airspace sectorization problem under this workload model is YES wherein the sectorization consists of a single sector encompassing the whole airspace with zero workload for the sector, unless of course c s <1 or c w <0, in which case there exists no sectorization meeting the constraints, and the answer would be NO.In other words: Observation 8. ASP D (m 4 ) is in P and is trivially solvable.Theorem 7 shows that unless P =NP, finding optimal solutions to ASP under workload models m 1 , m 2 , m 3 , and m 5 is prohibitively difficult, even if the flight trajectories or their projections onto the 2-dimensional plane seem reasonably simple (form a planar graph of maximum vertex degree six).
D. Sector Combination ProblemASP can be thought of as a clean-sheet approach to the DAC, in the sense that it disposes of the current sectorization in favor of another one that is being computed from scratch.In addition to the fact that finding an optimal sectorization seems prohibitively expensive, there is the problem of safe transition from the current sectorization to another one that may be computed when solving ASP, which could be drastically different from the current sectorization result.Such an abrupt change in the sectorization solution may have unexpected consequences and pose safety risks.In the absence of a robust strategy that guarantees safe and smooth transition between the current sectorization and one resulting from solving ASP, a more incremental approach is desirable.One such strategy is the Sector Combining Problem (SCP) proposed and studied by Bloem and Kopardekar 23 , Bloem, Gupta and Kopardekar 24 , and Drew 26 .They proposed heuristic and greedy algorithms for the problem, without providing guarantees on the quality of the results obtained.In the SCP, the current sectorization undergoes local adjustments consisting of combining neighboring sectors to find another sectorization that makes better use of the ATC resources.The goal is to do this intelligently so as to minimize the number of remaining sectors, while ensuring that the workload in the resulting sector does not violate the maximum workload constraint.These earlier research, however, left open the discussion about the computational complexity of the problem, a question that we will address in this section.Again, both optimization and decision versions of the problem can be formulated.Here, we formulate the decision version to study its computational complexity.Formally, an instance SCP D (m), where m is the workload model, is a tuple (A, S, F, c s , c w ), where A is the airspace partitioned into n sectors s 1 , s 2 , . .., s n forming S = {s 1 , s 2 , …, s n }, F is the set of flight trajectories, and c s and c w are constants.A sector aggregation is a partition P = {p 1 , p 2 , …, p k } of S such that if sectors s i , s j are in partition p k then there is a path (or a set of neighboring sectors) from s i to s j within p k.The workload model m associates a workload m(F, p i ) with partition p i .We seek to determine whether there exists an aggregation function P = {p 1 , p 2 , …, p k } with k £ c s such that for all i, we have m(F, p i ) £ c w .We can show the following: Theorem 9.The problems SCP D (m 1 ), SCP D (m 2 ), SCP D (m 3 ) and SCP D (m 5 ) (wherein m 1 , m 2 , m 3 and m 5 are the workload models defined in Eqs. ( 1), ( 2), (3), and ( 5) respectively) in three or more dimensions are NP-complete even when the flight trajectories (or their projection onto the two-dimensional plane) form a planar graph of maximum vertex degree six.The proof is very similar to that presented for the NP-completeness of ASP, and is based on reduction from PLANAR-P3( 6), hence we simply provide the main idea of the proof.Consider a planar graph G=(V, E), as the PLANAR-P3(6) instance given, and assume without loss of generality that |V| = 3.Consider an airspace A consisting of the unit square.Let R be an arbitrary partition of A that is consistent with G.That is, A is subdivided into |V| regions r 1 , r 2 , …, r n such that r i is adjacent to r j if and only if (v i , v j ) Î E. The correspondence between graph G and airspace A here is just like what was discussed for ASP and illustrated in Fig. 1(a
III. Minimum Delay Scheduling in Traffic Flow ManagementTraffic Flow Management [27][28][29][30][31][32][33] (TFM) is concerned with choreographing the flow of air traffic across the national airspace system (NAS) based on demand and available capacity.It consists of a number of strategic programs and practices conducted by the Federal Aviation Administration (FAA) to ensure safety, while at the same time trying to minimize the costs associated with delays incurred.Fig. 2 provides a notional illustration of aircraft flying through the NAS, passing through different centers, each of which comprising of a number of sectors along the designated flight paths of the aircraft.The Minimum Delay Scheduling (MDS) problem in TFM involves introducing strategic delays on the ground or en-route in order to meet i) the airport arrival and departure rates and ii) the capacity constraints in the sectors across the airspace, at all times.The MDS problem studied here is modeled after what was presented by Betrsimas and Stock-Patterson 28 .They presented a Mixed Integer Linear Programming (MILP) formulation for the problem and showed that the problem is NP-hard.Landry el al. 30 developed a system comprised of a distributed network of loosely coupled schedulers sharing capacity information, thus creating increased tolerance against uncertainties involved in estimating arrival times over long distances, while still allowing the construction of shortterm schedules.Tandale et al. 31 developed a simplex-based Dantzig-Wolfe decomposition based on the MILP formulation of the problem, thus allowing a massively parallelizable solution strategy for the problem.Barnhart et al. 32 developed a fairness metric to balance equity and efficiency and developed an integer programming formulation targeting the minimization of this fairness metric.Zhang el at. 33used an integer quadratic programming formulation that was first relaxed and solved as a quadratic programming problem by a distributed approach, followed by a heuristic forward-backward propagation phase to discretize the solution and obtain a solution to the original integer quadratic programming problem.While the MDS problem is known to be NP-hard, it is not clear whether on may be able to devise a worst-case polynomial time algorithms for the problem that while not guarantee finding an optimal solution, will find solutions that are guaranteed to be within reasonable approximation of the optimal.This is a problem that we address in this paper, showing that it is not possible to devise such an algorithm that guarantees a reasonable approximation of the optimal solution, unless P=NP.
A. Problem FormulationInformally, the MDS problem in TFM consists of a set F of flights, where flight must fly a designated route through the airspace.S is the collection of sectors sub-dividing the airspace A, and each flight must spend a designated minimum transit time in each sector along its path.Thus, each flight departs its designated airport, traverses a sequence of sectors, spending a minimum transit time in each sector, and then arrives at its designated arrival airport.Each airport has a time-varying arrival-and departure-rate constraint.Each sector has a time-varying capacity that constrains the number of flights simultaneously present in the sector.At no time t may the number of flights in the sector exceed its capacity.Flights may be delayed at the departure airport or in a sector as a means of avoiding the violation of the airport arrival or departure rates or sector capacity constraints.The objective of the problem is to find the minimal total delay required so that each flight flies its designated route without violating any airport arrival or departure rate or any sector capacity constraint.Our focus in this paper is on a simplified version of the MDS problem denoted as Simplified Minimum Delay Scheduling (SMDS).This simplified version is sufficient for establishing our computational complexity result, and yet our result generalizes immediately to the more general problem.In this simplified version, all flights depart from the same departure airport and all flights arrive at the same arrival airport.In addition, there are no arrival and departure rate constraints at the arrival and departure airport.More formally, the SMDS problem consists of a departure airport A D , an arrival airport A A , and a finite set S = {s 1 , s 2 , …, s n } of sectors.Time values are integral (integer values) and in the range [0, T].For each sector s i a capacity schedule c i : [0, T] ® N is given.Each flight is ready to depart from A D at time 0, and must arrive at A A prior to T. F = {f 1 , f 2 , …, f n } is the set of flights to be scheduled, and for each flight f i , its schedule s i = [(s i1 , t 1 ), (s i2 , t 2 ), . .., (s in , t n )] is a sequence of pairs, where the first element in each pair (s ij ) denotes a sector and the second element (t j ) denotes the transit time of the flight in the sector.Let usage i (t) = |{f Î F : f is in sector s i at time t}.Then, the capacity constraint can be expressed as usage i (t) £ c i (t).A solution to an SMDS instance is a set D = {d 1 , d 2 , …, d n }, wherein d i = [d 0i , d 1i , . .., d ki ] denotes the delays assigned to flight f i along its path, where d 0i is the delay at the departure airport and d ji is the delay incurred in the j th sector along the path of the flight.A solution is feasible if no sector capacity constraint is violated and each flight arrives at the arrival airport A A no later than T. That is, for each flight the sum of the delays and transit times along its path should not exceed T. The total delay of a solution D = {d 1 , d 2 , …, d n } is defined as delay(D) = S diÎD delay(d i ), where delay(d i ) = S j={1, 2, …, ki} d ij is the total delay assigned to flight f i .including its delay at the departure and all the sectors along its path.The objective in the SMDS problem is to find the feasible scheduling solution that has the minimal delay(D).An additional concern may be the notion of equity in treating different aircraft in the problem instance.Towards that end, we may wish to limit the maximum difference between total delay imposed on different aircraft.That is, to ensure spread(D) £ K, where spread(D) = max diÎD (delay(d i ))min diÎD (delay(d i )), and K is a given quantity.
B. Our Result on the Computational Complexity of MDSSince MDS is known to be NP-hard 28 , developing an efficient (worst-case polynomial time) algorithm for MDS that finds the optimal solution is out of the question, unless P=NP.There are NP-hard problems for which one can find reasonable approximations to the optimal solution in worst-case polynomial time.In this section, we prove that unless P=NP, there is no good approximation algorithm for MDS.We prove this result for the simplified version of the MDS, defined in the previous section (SMDS).The non-approximability result generalizes immediately to the more general MDS problem.Let I be an SMDS instance and OPT(I) be the delay of an optimal feasible solution.Let ALG be any polynomial time algorithm for SMDS and ALG(I) the delay associated with the solution computed by ALG(I).One might hope to find an algorithm ALG such that ALG(I) £ k ´ OPT(I) for some constant k.Such approximation algorithms exist for other NP-hard problems such as the knapsack problem 34 , Traveling Salesman problem with triangle inquality 35 , and the Euclidean Traveling Salesman problem 36 .We prove, however, that such an algorithm does not exist for SMDS, even for arbitrarily large values of k, unless P=NP.More precisely, we say ALG is an f(n) approximation algorithm for SMDS if, for an arbitrary instance of SMDS with n flights, we have ALG(I) £ f(n) ´ OPT(I).In this section, we prove that no polynomial time f(n) approximation algorithms exist for SMDS, where f(n) is of the formf(n) = n 1-e .We prove this result by establishing a polynomial time reduction from graph Maximum Independent Set (MIS) problem to SMDS.Given a graph G=(V, E), the MIS problem seeks to find the largest subset W of V such that none of the vertices in W is connected by an edge in E. In other words: " u, v Î W: (u, v) Ï E. Since it is known that MIS is not approximable 37 to within n 1-e for e > 0, our result would follow.The reduction given preserves approximability in the strong sense.If a graph with n nodes has a maximum independent set of size m, then the reduction constructs an instance of SMDS with n flights and minimum delay n-m.Given an instance G=(V, E) of MIS, we construct an instance of SMDS as follows (see Fig. 3):• For each vertex v i Î V, create a flight f i Î F.• For each edge e j Î E, create two sectors up j and down j in S and set their capacities as follows:o c upj (t) = ¥ o c downj (t) = 1 ; if t = j = 2; otherwise  Sector capacities: • For each flight f i Î F (corresponding to vertex v i Î V ) its schedule is s i = [(s 1 , 1), (s 2 , 1), …, (s n , 1)], where: o s j = down j ; if the edge e j is incident on vertex v i = up j ; otherwise Intuitively, think of the airspace as a rectangular area decomposed into sectors as illustrated in Fig. 3(a).Note that each flight traverses the airspace from left to right, spending one unit of time in each vertical strip consisting of the union of two sectors up j and down j .The upper sector up j of a strip has sufficient capacity so that all flights can be accommodated simultaneously.Recall that each strip corresponds to an edge in the graph and each vertex to a flight.The two flights f u , f v corresponding to vertices that are connected to the j th edge e j = (u, v) must fly through the lower sector down j in the corresponding strip.This sector has capacity 1 at time j.Thus, if neither flight is delayed prior to entering down j , there will be a capacity constraint violation.However, if either or both of the flights are delayed prior to entering the sector, there will not be a capacity constraint violation.To illustrate the full construction, a simple instance G = (V, E) of MIS and the corresponding SMDS instance constructed for it are shown in Fig. 3 Since the capacity of the upper sectors (up 1 , up 2 , . .., up n ) is set to infinity, the only capacity constraints that we need to worry about are those involving the lower sectors (down 1 , down 2 , . .., down n ).As illustrated in Fig. 3 (c), for each sector down j , corresponding to an edge e j = (u, v) of the given MIS instance, the only two flights entering the sector are f u , f v , which are those corresponding to vertices u, v incident on e j .Since the vertical strips consisting of an upper sector and a lower sector are visited sequentially, with each strip taking one time unit to traverse, and the capacity of down j drops for one time unit from 2 to 1 at time t = j, it follows that if either or both of the flights f u and f v are delayed at least one unit of time before they pass through down j , then their passage through down j will not violate the sector capacity, which would be 2, whether they enter down j simultaneously or not.If, on the other hand, neither f u nor f v is delayed prior to their arrival into sector down j (at time t = j), then their entrance into sector down j would violate the sector capacity c downj (t)=1.Moreover, we can show the following: Lemma 10.In any optimal scheduling solution, of the constructed SMDS instance, each flight is delayed by at most one unit of time.c up1 (t) = c up2 (t) = c up3 (t) = c up4 (t) = ¥Proof: Consider a solution in which flight f is delayed by more than one time unit.We claim that the delay can be reduced to exactly one, without violating the sector capacity constraints.The reason is that for any flight, once it is delayed by one unit (or more) prior to its departure, the capacity for each of the sectors that it ever enters exceeds the number of flights flying through the sector.This is because once we delay a flight by one unit at its departure, all the down sectors that it ever enters would have capacity 2 during the flight's presence in the down sector, essentially imposing no constraints, since the remaining flight that traverses the down sector can also be there, without violating the down sector's capacity.Since a delay of one unit would suffice, there is no need to ever have a delay or more than one unit, and hence, in a delay optimal solution, each flight is delayed by at most one unit of time.Proof: Assume W is a maximal independent set of G with m vertices.We construct a feasible solution of I with delay |V|m.The solution imposes a one unit of time delay before the departure on each flight that corresponds to a vertex in V -W.It is easy to see that this solution is feasible, because for any edge in e = (u, v) Î E, since the two vertices u, v are connected by an edge, they cannot both belong to the maximum independent set W, and hence at least one of the two vertices u, v must be a member of V -W.Since all flights that correspond to a vertex in V -W are delayed by one time unit prior to their departure, it means that all the down sectors are going to have their capacity meet or exceed the demand.Hence the schedule is feasible.To prove optimality, suppose that there exists a schedule to the SMDS instance with delay d¢ with d¢ < d.From the optimality of the solution, and Lemma 10, it must be that exactly d¢ flights are delayed, each by one time unit, while the rest of the flights are not delayed.Let W ¢ be the set of undelayed flights.It is easy to see that W ¢ would be an independent set for G, with more vertices than W.But this cannot be the case, since we assumed W to be the maximal independent set.Conversely, assume that the optimal feasible schedule for I has total delay d.We wish to show that the optimal solution to the MIS problem has size |V|d.This must be the case, since otherwise, based on the previous argument, if the MIS problem has a larger independent set, then we could construct a feasible schedule for the SMDS instance with smaller delay than d.g Since it is known 41 that MIS is not approximable to within n 1-e for e > 0, unless P=NP, it immediately follows that neither can SMDS.In addition, as it is shown, the optimal schedule for the constructed instance I of SMDS can take the delay for each delayed flight prior to taking off, as a ground delay.Furthermore, the non-approximability generalizes immediately to the MDS problem, which included SMDS as a special case.Hence, we have the following: Theorem 12.The NP-hard MDS problem cannot be approximated to within n 1-e for e > 0, where n is the number of aircraft in the problem instance, even if all the delays are to be taken on the ground prior to the departures.Also note that according to Lemma 10, in an optimal scheduling solution D of the constructed SMDS instance, each flight is delayed by at most one unit of time, hence spread(D) £ 1.In other words, the non-approximability result holds even when we are required to maintain equity among the aircraft.Note that in the construction of the SMDS instance, we have used time-varying sector capacities.It remains open whether the non-approximability result of Theorems 11, 12 hold if the sector capacities are fixed over time.
IV. Maximum Set of Dependent Aircraft in Precision Arrival Scheduling
A. Problem FormulationIncreasing the arrival throughput at busy airports and the ability of the air transportation system to accommodate and minimize the impact of unforeseen events such as missed approaches, off-nominal conditions, or accommodating emergency aircraft into arrival schedules is of increasing importance.NASA's recent initiative entitled Method to Enhance Scheduled Arrival Robustness 38 (MESAR) is an attempt to investigate the missed-approach problem in the Terminal Area Precision Scheduling and Spacing (TAPSS) system 39 .Off-nominal conditions in scheduled arrivals are defined as conditions that cause the actual landing sequence to be different from what was originally scheduled and was frozen earlier at the ATC facility.Missed approach is an off-nominal condition in which an aircraft that has missed or relinquished its originally scheduled slot in the arrival sequence is being inserted back into the arrival stream, thus altering the originally scheduled landing sequence.To accommodate this change, the algorithm needs to identify and send for rescheduling a set of aircraft whose arrival schedules would have to be recomputed.The Maximum Set of Dependent Aircraft (MSDA) problem studied in this section is motivated by the need to minimize the disturbances on the arrival schedule in order to accommodate a change caused by off-nominal conditions.The idea is to find the minimum set of aircraft that need to be rescheduled in order to accommodate the change caused by an off-nominal condition.Consider a set F of flights flying along their arrival routes to land at their designated runways, as shown in Fig 4(a).The arrival routes can be represented by a directed acyclic graph (DAG) G = (V, E) where E is the set of edges representing the route segments, and V is the set of vertices representing the beginning or ending of a segment, which include the intersections (merging points) between two or more route segments, including the meter fixes and arrival fixes, constituting the sign posts that the arriving aircraft are scheduled to fly through on their way to land.A central concern in MSDA is the notion of dependence between flights.Consider a vertex v Î V along the arrival routes, and two aircraft corresponding to flights f i , f j scheduled to fly through it, such that f j is scheduled to fly through v before f i is.Note that if f i is delayed for some reason, and hence cannot meet its original scheduled time of flying through v, in the absence of other constraints, f j can still proceed with its original schedule with no disruption, as far as flying through v is concerned.On the other hand, if f j is delayed and cannot meet its original schedule, then such a delay would impact f i as well.Thus, we say that f i 's schedule depends on f j 's or simply that f i depends on f j , and denote it as: f i ® f j .Such dependence is a direct dependence, since both flights pass through the same vertex along the routing graph.In general, however, two flights that do not fly through the same vertex in the routing graph (and hence their flight paths do not even intersect) may have dependence, in which case their dependence would be indirect.Such indirect dependence is generally caused by a chain of direct dependencies.We say that the dependence relation is transitive.That is, for any three flightsf i , f j , f k , if f i depends on f j (f i ® f j ) and f j depends on f k (f j ® f k ), then f i depends on f k (f i ® f k ).More generally, this can be stated as follows:Observation 13.Given two flights f i , f j , such that: f i ® f j , there must exist a sequence of flights (f a0 , f a1 , …, f ak ) such that: f i = f a0 , f j = f ak , and" i Î { 0, 1, 2, …, k-1}: f ai ® f ai+1 .Given a flight f Î F, a subset of flights H Ì F is called a dependent set of f if and only if " h Î H: h ® f.The maximal dependent set of f, denoted as dep(f) is the set of all flights in F who depend on f (directly or indirectly).In the MSDA problem, we are given (G, F, T, f d ), where G=(V, E) is the arrival routing graph, F is the set of arriving flights, T is the arrival schedule where T( f i , v) is the time at which flight f i is scheduled to fly through vertex v, and f d Î F is the target flight that is about to miss its schedule.The objective is to find dep(f d ), the maximal subset of flights in F that depend on f d .
B. An Efficient Algorithm for Solving MSDAHere, we present a simple and efficient algorithm for solving MSDA, using reachability in directed graphs.First, we define the dependence graph G D =(V D , E D ), where V D = {u 1 , u 2 , …, u n } is the set of vertices, with vertex u i corresponding to flight f i Î {f 1 , f 2 , …, f n }.There is an edge in E D from vertex u i to vertex u j if and only if flight f i depends on flight f j directly.That is, if f i and f j are scheduled to fly through the same node in the routing graph, with f j scheduled to fly through the node before f i .Figure 5   The construction of the dependence graph has several benefits.It allows for a concise representation of the dependence among flights.In addition, it allows for the application of graph algorithms to discover dependence characteristics among flights.In particular, we show the following: Theorem 14.Consider MSDA instance (G, F, T, f d ) and let G D be its corresponding dependence graph.Then, for any pair of aircraft f i , f j Î F, with corresponding vertices v i , v j Î V D , we have f i ® f j if and only if there is a directed path in G D from v i to v j .Proof: (IF) Assume there is a direct path P ij = (u 0 , u 1 , u 2 , …, u p ) in the dependence graph from v i to v j , where u 0 = v i , and u p = v j .Consider the vertices (u 0 , u 1 , u 2 , …, u p ) and the edges (u 0 , u 1 ), (u 1 , u 2 ), …, (u p-1, u p ) along this path, and the corresponding flights f u0 , f u1 , f u2 , …, f up .Note that our construction of the dependence graph guarantees that each of the edges along P ij corresponds to a direct dependence between the flights corresponding to the two vertices incident on each edge along the path P ij .That is, we must have  The algorithm of Fig. 6 was implemented in C/C++ and integrated into the simulation environment used in the real-time human-in-the-loop simulations reported by Jung, et al. 38 to minimize the extent of scheduling disturbances due to tactical updates to the arrival schedule.f i = f u0 ® f u1 ® f u2 ® . . . ® f uk-1 ® f uk = f j , which implies f i ® f j . (ONLYA separate MATLAB implementation was also implemented to conduct a simple Monte Carlo study to test the performance and run time of the algorithm.Three different airports: Dallas Love Field (DAL), Los Angeles International Airport (LAX), and Phoenix Sky Harbor International Airport (PHX) were modeled, each with a subset of their corresponding arrival routing graphs.For each airport, the number of arrival aircraft were set to 10, 20, 40, 80, and 160, and for each of these problem sizes, 100 random arrival scenarios were generated, each with a randomly designated target aircraft.These scenarios were then run through the algorithm shown in An additional twist on the MSDA problem is that, at the moment the query comes, depending on where each arrival aircraft is situated along its arrival path, some of the aircraft have already passed a handful of the vertices along their arrival paths.This would allow for pruning the direct dependencies.Only those direct dependencies that lie in the future need to be taken into account.This allows for speeding up the algorithm, shrinking the size of the dependence graph.Such pruning was not implemented in the runs summarized in Fig. 7, so the reported run times represent a conservative view of the scalability of the algorithm.
V. DiscussionA unifying theme and an underlying purpose of presenting results in this work has been to advocate more extensive use of graph theoretic ideas in the ATM domain, and to demonstrate that graph theory provides a suitable mathematical abstraction for formulating, reasoning about and solving many technical problems arising in ATM domain.The abstraction offered by graph theory has several notable advantages: 1) it provides a framework that is suitable for precise formulation of the problem that is free from unrelated details of the specific application domain, 2) this precise formulation allows for the application of graph-theoretic algorithms and ideas that may have been historically developed for very different application domains, to be readily applicable to new applications, and thus allow for cross fertilization and collaboration among researchers specializing in very different subject areas, 3) the graph theoretic mathematical formulation allows for different generalizations that may potentially lead to new, unforeseen insights and exciting developments, and 4) the rich and powerful libraries of customizable graph data structures, graph analytics, and the associated algorithms and software toolkits [40][41][42][43] can be exploited to model, reason about, and eventually solve diverse problems in modern air transportation.In addition, linking new (ATM) problems to (graph) problems that have been studied in the past, creates bridges among islands of knowledge, thus contributing to the expansion of our understanding of the problems and the relationships among them.Not only does this minimize the potentially wasted efforts to rediscover what is already known and the proverbial "reinventing the wheel", it also allows potential future discoveries in related domains to be more readily applicable to the ATM domain.Gaining a better understanding of the inherent difficulty and the computational complexity of a problem allows the research effort to be better guided and focused on areas that are more likely to lead to promising solutions.Some of the approaches that can be taken include a) studying special classes of the problems that can be solved optimally or approximately, b) developing heuristics that may target special classes of the problem optimally or approximately, and then using those solutions as guidelines to develop solutions for practical problem instances, c) using strategies such as divide-and-conquer or dynamic programming to break the problem into smaller sup-problem instances that could each be solved optimally or approximately, and then combining the solutions to the sub-problems intelligently into reasonably good solutions for the original problem.Graph theoretic algorithms and libraries [40][41][42][43] can provide a suitable modeling, development, algorithmic framework to realize such strategies.In formulating and presenting our results for the ASP, SCP, and MDS problems, we have mainly focused on, and used the terminology specific to, the underlying ATM applications.However, as an example for the 2 nd advantage listed in the previous paragraph, note that due to the flexible nature of the way workload models and sector capacity may be defined, these problems can find applications that arise in diverse set of technical disciplines dealing with partitioning of a geometric space that may intersect a set of interacting objects.Depending on the application, the workload or the capacity models may be defined differently, and the objects may be static or moving entities modeled as points, line segments, curves, or other geometric shapes located in space-time.Some of these applications include geometric load balancing for parallel and distributed processing 44 , geographic partitioning for workload balancing of municipal services (e.g., power districting 45 , winter road maintenance 46 , determination of police patrol coverage areas 47 ), political redistricting 48 , and sales force territory design 49 .
VI. ConclusionGraph theory is used to study different problems arising in air traffic management.First, using a polynomial reduction from an NP-complete planar graph partitioning problem, it is shown that the airspace sectorization problem is NP-hard, in general under several simple workload models, even if the projection of the flight trajectories in the two-dimensional plane forms a planar graph of maximum vertex-degree six.This result is extended to show that the seemingly simpler and more practical problem that tries to make local adjustment to a given sectorization (as opposed to computing one from scratch)-namely the Sector Combining Problem-is also NP-hard.It remains open whether or not there exist polynomial time approximation algorithms for the airspace sectorization problem and the sector combining problem.Second, by establishing a polynomial time reduction from maximum independent set in graphs, it is shown that for any fixed e, the problem of finding a solution to the minimum-delay scheduling problem in traffic flow management that is guaranteed to be within n 1-e of the delay-optimal solution, where n is the number of aircraft in the problem instance, is NP-hard, even if the delays are all taken on the ground.Furthermore, this nonapproximability result holds when we are required to maintain delay equity among different flights in the problem instance.The reduction, however, used a time-varying sector capacity schedule.It remains open whether the nonapproximability result holds if the sector capacities are fixed and do not vary over time.Finally, a problem arising in precision arrival scheduling is formulated and solved using graph reachability.The algorithm was implemented and tested in a related real-time human-in-the-loop simulation, and experimental evidence is provided to demonstrate the scalability of the algorithm over randomly generated arrival scenarios for three different airports.We believe effective exploration and application of graph theoretic ideas, in conjunction with proper use of data analysis and machine learning techniques could be a very attractive area for further investigation of manned and autonomous ATM that could help pave the path for more effective automation and automated discovery of optimized solutions.and only if, given a candidate solution c, there is a deterministic algorithm that can verify in polynomial time that c is in fact a valid solution.A problem is NP-hard if it is at least as hard as the hardest problems in NP.In other words, a problem P is NP-hard if and only if all problems in NP can be solved in deterministic polynomial time if P can be solved in deterministic polynomial time.A problem is NP-complete if it is both in NP and is NP-hard.Fig. 9 provides a notional illustration of how the complexity classes P, NP, NP-Complete, and NP-hard are related to one another.When expressing the time complexity of an algorithm, we typically express the worst-case run-time of the algorithm as a function of the size of the problem instance.So, when we say that a problem has a deterministic polynomial time algorithm, we mean that there is a deterministic algorithm solving the problem whose worst-case running time is bound by a polynomial function of the input size (given a suitable unit of time).A problem that is shown to be NP-complete or NP-hard is generally considered intractable.In such cases, one turns to algorithms that do not guarantee finding the optimal solution.This is because there is widespread agreement (but no known proof, despite much dedicated effort) that no NP-complete problem can be solved deterministically in polynomial time.In fact, the biggest open question in computer science and one of the greatest open problems in all of mathematics 50,51 is whether the classes of problems that can be solved deterministically in polynomial time (P) and those that can be solved non-deterministically in polynomial time (NP) are the same.That is, whether P = NP.The general technique used for showing that a given problem P is NP-hard (NP-complete, respectively) is to use what is typically called polynomial time reduction, sometimes referred to simply as reduction.That is, to find an NPhard (NP-complete, respectively) problem Q, and to show that given an arbitrary instance IQ of Q, it is possible to create an instance IP of P in (deterministic) polynomial time, such that the solution of Q on instance IQ can be readily translated into a solution of P on instance IP, and vice versa.In the context of decision problems (problems with answers YES or NO), this means that the answer to the decision problem Q on instance IQ is YES if and only if the answer to the decision problem P on instance IP is YES.If we can show this, we have effectively proven that there is a way to solve an NP-hard (NP-complete, respectively) problem by first translating it into our problem P (using polynomial amount of effort), and then solving P on the constructed instance IP.When a problem is shown to be NP-hard, it is generally considered a problem whose optimal solution cannot be found except in special cases.In practice, several paths may be taken in such circumstances.One strategy is to find algorithms that do not guarantee to find the optimal solution, but are guaranteed to find solutions that are within provable bounds of the optimal.Such algorithms are called approximation algorithms 52 and are the subject of extensive studies in the theory of algorithms.Formally, an algorithm is called r-approximate for a minimization (maximization) problem if the algorithm finds a solution whose cost is at most a factor of r away from the optimal solution.An optimization problem is in P if it has a combinatorial structure that can be exploited as a foothold to efficiently home in on an optimal solution.While NP-hard problems do not offer such a foothold, they may still possess structures that could be exploited to find solutions that are guaranteed not to be too far from the optimal.Yet, there are optimization problems for which it is possible to prove that even the design of an r-approximate algorithm with small r is impossible, unless P=NP.An example of such a problem is Maximum Independent Set (MIS) in graphs, that involves finding the largest set of vertices none of which is connected by an edge to any other vertex in the set.In an influential paper, Håstad 37 proved that, for a graph with n vertices, MIS cannot be approximated to within n 1-e for any e > 0, unless P=NP.More thorough discussion of the results on hardness of approximation can be found in the related literature for probabilistic checking of proofs 53,54 and computational inapproximability 55,56 .AE = The empty set j i = A division of the airspace in the constructed ASP D instance for a given PLANAR-P3(6) instance A = The airspace, which is typically a closed subset of 2-or 3-dimensional Euclidean space A A = Arrival airport in the constructed SMDS problem instance A D = Departure airport in the constructed SMDS problem instance ALG = A polynomial time algorithm for SMDS problem ALG(I) = The delay associated with the solution resulting from algorithm ALG on instance I of SMDS ASP = The Airspace Sectorization Problem (optimization version) in DAC ASP D = The decision version of ASP ASP MS = Min-sector version of the ASP optimization problem ASP MW = Min-workload version of the ASP optimization problem ATC = Air Traffic Control ATM = Air Traffic Management c downj (t) = The capacity of sector down j in the constructed SMDS instance c i (t) = The capacity of sector s i at time t in the SMDS instance c s = The upper bound on number of sectors in a feasible solution for an ASP D instance c upj (t) = The capacity of sector up j in the constructed SMDS instance c w = The upper bound on the sector workload in a feasible solution for an ASP D instance d ij = The delay assigned to the j th sector along flight f i 's route in the constructed SMDS instance d i = The sequence of delays assigned to flight f i in different sectors along its flight path in the constructed SMDS instance D = The set of delay sequences imposed on the set of flights in the constructed SMDS instance DAC = Dynamic Airspace Configuration down i = The lower sector in a sector pair in the constructed instance of SMDS E = The edge set of a graph |E| = The size of E (number of edges in E) F = Set of flights or flight trajectories in ASP, SCP, MDS, SMDS and MSDA problems f i = The i th flight in ASP, SCP, MDS or MSDA problems G = A graph MDS = The Minimum Delay Scheduling problem in traffic flow management MILP = Mixed Integer Linear Programming m j (F, s i ) = Workload model m j , accounting for the workload in sector s i due to the set of flights in F MSDA = Maximum Set of Dependent Aircraft problem in air traffic management n = Problem size, e.g., the number of flights in the problem instance OPT(I) = Optimal (smallest) delay of a feasible solution to instance I of SMDS P = Sector aggregation (partition) function in SCP p i = The i th partition in P PNANAR-3DM = Three dimensional matching problem in planar graphs PLANAR-P3 = The problem of partitioning a planar graph into triangles PLANAR-P3(6) = A restricted version of PLANAR-P3 in which each vertex is incident on 6 or fewer edges R n = n-dimensional Euclidean space S = The set of sectors in the ASP, SCP, MDS and SMDS SCP = Sector Combining Problem in DAC s i = The i th sector in ASP, SCP and SMDS problems SMDS = The simplified version of the MDS problem spread(D) = The difference between the max and min total delay imposed on different flights in a feasible solution to the constructed SMDS instance t = Time dimension in ASP, SCP, MDS and SMDS T = The scheduling function in MSDA TFM = Traffic Flow Management up i = The upper sector in a sector pair in the constructed instance of SMDS V = Vertex set of a graph |V| = The size of V (number of vertices in V) x, y, z = Spatial dimensions
Fig. 1 (1c) demonstrates this step, given the PLANAR-P3(6) instance of Fig.1(a).
Figure 1 .1Figure 1.Construction of the ASP D (m 1 ) instance from given PLANAR-P3(6) instance.
Fig. 1 (1d) demonstrates the complementary flight trajectories created in this step for the PLANAR-P3(6) instance shown in Fig. 1(a).
Theorem 7 .7The problems ASP D (m 1 ), ASP D (m 2 ), ASP D (m 3 ) and ASP D (m 5 ) (wherein m 1 , m 2 , m 3 and m 5 are the workload models defined in Eqs. (
), 1(b).The rest of the proof parallels what was presented for ASP.
Figure 2 .2Figure 2. Notional illustration of aircraft flying along their designated paths across the NAS.
Figure 3 .3Figure 3. (a) Airspace geometry in the constructed SMDS instance, (b) Given MIS instance, (c) Constructed SMDS instance for given MIS instance.
f 1 :1s 1 = [ (down 1 , 1), (up 2 , 1), (up 3 , 1), (up 4 , 1) ] f 2 : s 2 = [ (down 1 , 1), (down 2 , 1), (down 3 , 1), (up 4 , 1) ] f 3 : s 3 = [ (up 1 , 1), (down 2 , 1), (up 3 , 1), (down 4 , 1) ] f 4 : s 4 = [ (up 1 , 1), (up 2 , 1), (down 3 , 1), (down 4 , 1) ]
(b), 3(c), respectively.The vertices in the MIS instance shown in Fig 3(b) are color-coded, as are the notional paths of their corresponding flights in the constructed SMDS instance shown with dotted lines at the top of Fig. 3(c) on the lefthand side; the minimum transit times for these flights are shown at the top of Fig. 3(c) on the right-hand side.
g 11 .11Theorem Let G = (V, E) be an instance of MIS and I be the constructed SMDS instance.Then the largest independent set of G has m vertices if and only if the minimal delay schedule for I has a delay d=|V|-m.
illustrates the construction of the dependence graph for the MSDA instance shown in Fig. 4. The direct dependencies corresponding to the set of flights going through each vertex are shown in Fig. 5(a), and the complete dependence graph is shown in Fig. 5(b).
Figure 5 .Figure 4 .54Figure 5. (a) Identifying direct dependences, (b) Constructing the dependency graph from direct dependencies.
IF): Assume f i ® f j , then according to observation 13, there must exist a sequence F ij = ( f i0 , f i1 , …, f ik ) of flights in the MSDA problem instance with f i = f i0 and f j = f ik such that for all a Î {0, 1, …, k-1}, flight f ia depends directly on flight f ia+1 .This means that there exists a direct path in G D from vertex u ai to vertex u aj which passes through the vertices in V D corresponding to the flights in F ij .gC.An Efficient Algorithm for Solving MSDATheorem 14 suggests a simple approach for solving the MSDA.All we have to do is to construct the dependence graph G D and then find all the vertices in V D reachable from u id , where u id is the vertex in V D corresponding to f d , the target flight in the MSDA instance.The pseudocode for this algorithm is given in Fig.6.To analyze the run-time of the algorithm, we first note that the dominant steps of the algorithm are steps 1 and 2, the creation of the dependence graphG D = (V D , E D ) ,and the execution of BreadthFirstSearch on G D .Construction of G D : The amount of time required to construct the dependence graph G D is proportional to the sum of its number of vertices and its number of edges, or |V D | + |E D | .Note from the definition of G D that each vertex in the dependence graph corresponds to a flight in the MSDA problem instance.That is, |V D | = |F|.Additionally, note that in the worst case, each flight can contribute to at most two direct dependencies for each of the vertices in the routing graph that it visits.Of course, it is possible (or perhaps even likely) that some of these direct dependencies involve the same pair of flights, as they may both cross different vertices in the routing graph consecutively.However, in our current analysis, we can ignore such a possibility as we are only concerned with calculating an upper bound for the number of edges in the dependence graph.Therefore, the total number of direct dependencies in an MSDA instance, as well as the number of edges |E D | in its corresponding dependence graph is upper bounded # by |F| ´ |V| .In other words, we can construct G D in time proportional to |V D | + |E D | , or O (|A| ´ |V|) time.Execution of BreadthFirstSearch : In its standard implementation, the breadth-first search algorithm has its worstcase running time proportional to the sum of the number of vertices and the number of edges, and thus this portion of the algorithm has running time O(|V D |+|E D |) = O(|F| ´ |V|) .Therefore, we have the following result: Theorem 15.MSDA can be solved in time O(mn) using reachability on the dependence graph, where m is the number of vertices in the arrival routing graph, and n is the number of flights in the MDS problem instance.# Note that this is not necessarily a tight upper bound.As an example, the dependence graph in Fig. 5(b) has |E D |=16 edges, while the upper bound provided by the expression |F| ´ |V| is 121.See Fig. 7(a) for more examples.
Figure 6 .6Figure 6.Pseudocode of our algorithm for solving MSDA.
Fig 6 .6The results of these experiments are summarized in Fig. 7, showing that the runtime of the algorithm is roughly linear in the number of aircraft in the problem instance, which is what is expected from the analysis presented earlier.The growth rate of the dependence graph is captured by |E D | shown in the last column of Fig. 7(a), next to its upper bound given by the expression |F| ´ |V|.The average runtime for different problem sizes for each airport are shown in Fig. 7(b), confirming the efficiency of the algorithm and its suitability for solving MSDA in under a second for problem sizes up to a couple of hundred aircraft, making it suitable for real-time application.
Figure 7 .7Figure 7. (a) Number of edges in the dependence graph, on average, over 100 randomly generated MSDA problem instances for DAL, LAX and PHX airports.(b) The average runtime growth rate for the 100 random instances tested for each size for DAL, LAX, and PHX.
Figure 9 .9Figure 9. Classes P, NP, NP-complete and NP-hard of problems, and examples of each.

			Downloaded by NASA AMES RESEARCH CENTER on July 6, 2017 | http://arc.aiaa.org| DOI: 10.2514/6.2017-3775
		
		

			
AcknowledgmentsThe authors would like to thank Mr. Todd Farley, Dr. Shon Grabbe, Mr. Saugata Guha, Dr. Sebastian Gutierrez Nolasco, and Mr. Zachary Wood for valuable discussions and feedback on earlier drafts of this manuscript.A. H. Farrahi would also like to thank Mr. Todd Farley for his support and encouragements during the course of this research.
			

			
Appendix
A. Refresher on Graph TheoryA very basic introduction and notation on the theory of graphs is presented below.A more thorough discussion can be found in standard texts on the subject 3,4 .A graph G is defined as an ordered pair (V, E) of disjoint sets, where V = {v 1 , v 2 , …, v |V| } represents the set of vertices or nodes, and E = {e 1 , e 2 , …, e |E| } is the set of edges.Each edge e = (u, v) Î E is a pair of vertices in V, signifying that the two vertices u and v are connected or joined by the edge.The graph may be directed or undirected, in which case the edges are directed or undirected, and are represented by ordered or unordered pairs, respectively.An edge (u, v), which is also represented as uv, is said to join, connect or be incident on vertices u and v, causing the two vertices to become adjacent to (or neighboring) each other, and each being incident on the edge uv.For a vertex v Î V, the number of distinct edges incident on v, denoted as d v , is known as its degree.Given graphs G = (V , E) and G¢ = (V¢, E¢), we say that G¢ is a subgraph of G if and only if V ¢ Í V and E¢ Í E. In subgraph G¢ = (V¢, E¢), if E¢ includes all edges of G that join two vertices in V¢, then G¢ is the subgraph of G induced by V ¢.It is often useful to draw a picture of a graph as its visual representation.In such representation, the vertices are drawn as distinct labeled points, and the edges are drawn as (potentially curved) lines connecting the points corresponding to the vertices it joins.If such a drawing can be accomplished on the plane in such a way that the edges do not intersect, except (potentially) at their endpoints corresponding to the vertices they connect, then the graph is a plane or planar graph and such a drawing is a planar drawing of the graph.A path P in the graph G = (V , E) is a non-empty sequence (p 1 , p 2 , …, p k ) of vertices in V such that " i Î {1, 2, …, k}: (p i , p i+1 ) Î E. Such a path is said to connect p 1 to p k .A graph is connected if for every pair (u, v) of distinct vertices there is a path connecting u to v. A cycle is a path wherein the first and the last vertex in the sequence are the same.A graph that does not contain any cycles is a forest or an acyclic graph.A connected forest is a tree.A tree that visits all the vertices in the graph is called a spanning tree.Some of these notions are illustrated in Fig. 8.
B. Refresher on the Theory of Computational ComplexityBasic background from the theory of computational complexity is provided here.For a more thorough discussion of the topic, the reader is referred to standard texts on the subject. 5,6 omputational complexity is concerned with studying the amount of resources (such as time, space, power) required to solve different computational problems.At the most basic level, a problem is said to be in P if and only if it can be solved deterministically in polynomial time.That is a time, polynomial in the size of the problem instance, using a suitable unit of time.A problem is in NP if			
			

				


	
		NextGen next generation air transportation system: NextGen policy issues
		
			Next Generation Air Transportation System
		
		10.1109/icnsurv.2011.5935406
		
	
	
		2011 Integrated Communications, Navigation, and Surveillance Conference Proceedings
		
			IEEE
			
		
	
	Next Generation Air Transportation System, Federal Aviation Administration, U.S. Department of Transportation, http://www.faa.gov.nextgen/.



	
		Airspace Configuration Concepts for the Next Generation Air Transportation System
		
			ParimalKopardekar
		
		
			KarlDBilimoria
		
		
			BanavarSridhar
		
		10.2514/atcq.16.4.313
	
	
		Air Traffic Control Quarterly
		Air Traffic Control Quarterly
		1064-3818
		2472-5757
		
			16
			4
			
			2011. April 5, 2011
			American Institute of Aeronautics and Astronautics (AIAA)
		
	
	Kopardekar, P. H., Aquilina, R., Edwards, T.A., Crisp, V. K., and Covalowski, J. A., Airspace systems program: Next generation air transportation system concepts and technology development projects, 2011. FY2011-2015 Project Plan, National Aeronautical and Space Administration, April 5, 2011.



	
		Modern Graph Theory
		
			BBollobas
		
		10.1007/978-1-4612-0619-4
	
	
		Graduate Texts in Mathematics, book 184
		
			Springer New York
			October 2013
		
	
	corrected ed.
	Bollobas, B., Modern Graph Theory, Graduate Texts in Mathematics, book 184, corrected ed., Springer, October 2013.



	
		Graph Theory, Graduate Texts in Mathematics
		
			GDistel
		
		
			October 2013
			Springer
			179
		
	
	th ed.
	Distel, G., Graph Theory, Graduate Texts in Mathematics, book 179, 5 th ed., Springer, October 2013.



	
		Computers and Intractability, A Guide to the Theory of NP-Completeness
		
			MRGarey
		
		
			DSJohnson
		
		
			January 1979
			W.H. Freeman
		
	
	Garey, M. R., and Johnson, D. S., Computers and Intractability, A Guide to the Theory of NP-Completeness, W.H. Freeman, January 1979.



	
		Computational Complexity: A Modern Approach
		
			SArora
		
		
			BBoaz
		
		
			April 2009
			Cambridge University Press
			1
		
	
	st ed.
	Arora, S., Boaz, B., Computational Complexity: A Modern Approach, 1 st ed., Cambridge University Press, April 2009.



	
		Initial Concepts for Dynamic Airspace Sectorization
		
			PKopardekar
		
		
			KBilimoria
		
		
			BBridhar
		
	
	
		Proc. Of AIAA Aviation Technology, Integration and Operations Conference (ATIO)
		Of AIAA Aviation Technology, Integration and Operations Conference (ATIO)Belfast, Northern Ireland
		
			September 18-20, 2007
		
	
	Kopardekar, P., Bilimoria, K., Bridhar, B., "Initial Concepts for Dynamic Airspace Sectorization", Proc. Of AIAA Aviation Technology, Integration and Operations Conference (ATIO), Belfast, Northern Ireland, September 18-20, 2007.



	
		Initial Implications of Automation on Dynamic Airspace Configuration
		
			KennethLeiden
		
		
			JillKamienski
		
		
			ParimalKopardekar
		
		10.2514/6.2007-7886
	
	
		7th AIAA ATIO Conf, 2nd CEIAT Int'l Conf on Innov and Integr in Aero Sciences,17th LTA Systems Tech Conf; followed by 2nd TEOS Forum
		
			American Institute of Aeronautics and Astronautics
			
		
	
	Leiden, K., Kamienski, J., Kopardekar, P., "Initial Implications of Automation on Denamic Airspace Configuration", Proc.



	
		6th AIAA Aviation Technology, Integration and Operations Conference (ATIO)
		10.2514/matio06
	
	
		Integration and Operations Conference (ATIO)
		Belfast, Northern Ireland
		
			American Institute of Aeronautics and Astronautics
			September 18-20, 2007
		
	
	Of AIAA Aviation Technology, Integration and Operations Conference (ATIO), Belfast, Northern Ireland, September 18-20, 2007.



	
		Airspace sectorization with constraints
		
			HuyTrandac
		
		
			PhilippeBaptiste
		
		
			VuDuong
		
		10.1051/ro:2005005
	
	
		RAIRO - Operations Research
		RAIRO-Oper. Res.
		0399-0559
		1290-3868
		
			39
			2
			
			June 2003
			EDP Sciences
			Budapest, Hungary
		
	
	Trandac, H., Duong, V., "Optimized Sectorization of Airspace with Constraints", Proceedings of the 5th Eurocontrol/FAA ATM R&D Seminar, Budapest, Hungary, June 2003.



	
		Temporal and Spatial Distribution of Airspace Complexity for Air Traffic Controller Workload-Based Sectorization
		
			ArashYousefi
		
		
			GeorgeDonohue
		
		10.2514/6.2004-6455
	
	
		AIAA 4th Aviation Technology, Integration and Operations (ATIO) Forum
		Chicago, IL, USA
		
			American Institute of Aeronautics and Astronautics
			September 2004
		
	
	Yousefi, A. Donahue, G.L., "Temporal and Spatial Distribution of Airspace Complexity for New Methodologies in Airspace Design, Proceedings of the 4th AIAA Aviation Technology, Integration, and Operations Conference (ATIO), Chicago, IL, USA, September 2004.



	
		An Efficient Method for Airspace Analysis and Partitioning Based on Equalized Traffic Mass
		
			AKlein
		
	
	
		Proceedings of the 6th USA
		the 6th USABaltimore, MD, USA
		
			June 2005
		
	
	Klein, A. "An Efficient Method for Airspace Analysis and Partitioning Based on Equalized Traffic Mass", Proceedings of the 6th USA/Europe Seminar on Air Traffic Management Research and Development, Baltimore, MD, USA, June 2005.



	
		Geometric Algorithms for Optimal Airspace Design and Air Traffic Controller Workload Balancing
		
			AmitabhBasu
		
		
			JosephS BMitchell
		
		
			GirishkumarSabhnani
		
		10.1137/1.9781611972887.8
	
	
		2008 Proceedings of the Tenth Workshop on Algorithm Engineering and Experiments (ALENEX)
		Northampton, MA
		
			Society for Industrial and Applied Mathematics
			November 2006
			
		
	
	Basu, A., Mitchell, J.S.B., Sabhnani, G., "Geometric Algorithms for Optimal Airspace Design and Air Traffic Controller Workload Balancing", 16 th Fall Workshop on Computational Geometry, Northampton, MA, November 2006.



	
		Initial Concepts for Dynamic Airspace Configuration
		
			ParimalKopardekar
		
		
			KarlBilimoria
		
		
			BanavarSridhar
		
		10.2514/6.2007-7763
	
	
		7th AIAA ATIO Conf, 2nd CEIAT Int'l Conf on Innov and Integr in Aero Sciences,17th LTA Systems Tech Conf; followed by 2nd TEOS Forum
		
			American Institute of Aeronautics and Astronautics
			September 2007
		
	
	Kopardekar, P., Bilimoria, K., Sridhar, B., "Initial Concepts for Dynamic Airspace Configuration", Proceedings of AIAA Aviation Technology, Integration and Operations Conference, September 2007.



	
		A Weighted-Graph Approach for Dynamic Airspace Configuration
		
			StephaneMartinez
		
		
			GanoChatterji
		
		
			DengfengSun
		
		
			AlexandreBayen
		
		10.2514/6.2007-6448
	
	
		AIAA Guidance, Navigation and Control Conference and Exhibit
		
			American Institute of Aeronautics and Astronautics
			2007
		
	
	Martinez, S.A. Martinez, G.B. Chatterji, D. Sun, A.M. Bayen, "A Weighted-Graph Approach for Dynamic Airspace Configuration", Proceedings of AIAA Guidance, Navigation and Control, 2007.



	
		Geometric Algorithms for Optimal Airspace Design and Air Traffic Controller Workload Balancing
		
			AmitabhBasu
		
		
			JosephS BMitchell
		
		
			GirishkumarSabhnani
		
		10.1137/1.9781611972887.8
	
	
		2008 Proceedings of the Tenth Workshop on Algorithm Engineering and Experiments (ALENEX)
		San Francisco, CA
		
			Society for Industrial and Applied Mathematics
			January 2008
			
		
	
	Basu, A., Mitchell, J.S.B., Sabhnani, G., "Geometric Algorithms for Optimal Airspace Design and Air Traffic Controller Workload Balancing", Proceedings of SIAM Workshop on Algorithm Engineering and Experiments, pp. 75-89, San Francisco, CA, January 2008.



	
		Dynamic FPAs: A new method for dynamic airspace configuration
		
			AlexanderKlein
		
		
			MarkDRodgers
		
		
			Hong Kaing
		
		10.1109/icnsurv.2008.4559176
	
	
		2008 Integrated Communications, Navigation and Surveillance Conference
		Bethesda, MD
		
			IEEE
			May 2008
		
	
	Klein, A., Rodgers, M.D., Kaing, H., "Dynamic FPAs: A New Method for Dynamic Airspace Configuration", Integrated Communications Navigation and Surveillance (ICNS), Bethesda, MD, May 2008.



	
		Airspace Sector Redesign Based on Voronoi Diagrams
		
			MinXue
		
		10.2514/6.2008-7223
	
	
		AIAA Guidance, Navigation and Control Conference and Exhibit
		Honolulu, HI
		
			American Institute of Aeronautics and Astronautics
			August 2008
		
	
	Xue, M., "Airspace Sector Redesign Based on Voronoi Diagrams", Proceedings of AIAA Guidance, Navigation, and Control Conference, Honolulu, HI, August 2008.



	
		Chapter-03 Setup of Operation Theatre of Caesarean Section
		
			SadhanaGupta
		
		10.5005/jp/books/10796_3
	
	
		Step by Step� Caesarean Delivery
		
			Jaypee Brothers Medical Publishers (P) Ltd.
			2007
			
		
	
	FAA Order JO7210.3V. Facility Operation and Administration, Chapter 17, Section 7. Monitor Alert Parameter, 2007.



	
		Airspace Complexity Measurement: An Air Traffic Control Simulation Analysis
		
			PKopardekar
		
		
			ASchwartz
		
		
			SMagyarits
		
		
			JRhodes
		
	
	
		Proceedings of the 7 th USA/Europe R&D Seminar
		the 7 th USA/Europe R&D SeminarBarcelona, Spain
		
			July 2007
		
	
	Kopardekar, P., Schwartz, A., Magyarits, S., Rhodes, J. "Airspace Complexity Measurement: An Air Traffic Control Simulation Analysis", Proceedings of the 7 th USA/Europe R&D Seminar, Barcelona, Spain, July 2007.



	
		Airspace Complexity and its Application in Air Traffic Management
		
			BSridhar
		
		
			KSSheth
		
		
			SGrabbe
		
	
	
		Proceedings of the 2 nd USA/Europe Air Traffic Management R&D Seminar
		the 2 nd USA/Europe Air Traffic Management R&D SeminarOrlando, FL
		
			December 1998
		
	
	Sridhar, B., Sheth, K.S., Grabbe, S., "Airspace Complexity and its Application in Air Traffic Management", Proceedings of the 2 nd USA/Europe Air Traffic Management R&D Seminar, Orlando, FL, December 1998.



	
		Dynamic Density and Complexity Metrics for Realtime Traffic Flow Management
		
			AJMasalonis
		
		
			MBCallaham
		
		
			CRWanke
		
	
	
		Proceedings of the 5 th USA/Europe Air Traffic Management R&D Seminar
		the 5 th USA/Europe Air Traffic Management R&D SeminarBudapest, Hungary
		
			June 2003. 22
		
	
	Masalonis, A.J., Callaham, M.B., Wanke, C.R., "Dynamic Density and Complexity Metrics for Realtime Traffic Flow Management", Proceedings of the 5 th USA/Europe Air Traffic Management R&D Seminar, Budapest, Hungary, June 2003. 22



	
		Dynamic density: measuring and predicting sector complexity [ATC]
		
			PKopardekar
		
		
			SMagyarits
		
		10.1109/dasc.2002.1067920
	
	
		Proceedings. The 21st Digital Avionics Systems Conference
		The 21st Digital Avionics Systems ConferenceBudapest, Hungary
		
			IEEE
			June 2003
		
	
	Kopardekar, P., Magyarits, S., "Measurement and Prediction of Dynamic Density", Proceedings of the 5 th USA/Europe Air Traffic Management R&D Seminar, Budapest, Hungary, June 2003.



	
		Planar 3DM is NP-complete
		
			MEDyer
		
		
			AMFrieze
		
		10.1016/0196-6774(86)90002-7
	
	
		Journal of Algorithms
		Journal of Algorithms
		0196-6774
		
			7
			2
			
			1986
			Elsevier BV
		
	
	Dyer, M.E., Frieze, A.M. "Planar 3DM is NP-Complete", Journal of Algorithms, Vol. 7 (2), pp. 174-184, 1986.



	
		Combining Airspace Sectors for the Efficient Use of Air Traffic Control Resources
		
			MichaelBloem
		
		
			ParimalKopardekar
		
		10.2514/6.2008-7222
	
	
		AIAA Guidance, Navigation and Control Conference and Exhibit
		Honolulu, HI
		
			American Institute of Aeronautics and Astronautics
			August 2008
		
	
	Bloem, M., Kopardekar, P., "Combining Airspace Sectors for the Efficient Use of Air Traffic Control Resources", Proceedings of AIAA Guidance Navigation and Control Conference, Honolulu, HI, August 2008.



	
		Algorithms for Combining Airspace Sectors
		
			MichaelBloem
		
		
			ParimalKopardekar
		
		
			PramodGupta
		
		10.2514/atcq.17.3.245
	
	
		Air Traffic Control Quarterly
		Air Traffic Control Quarterly
		1064-3818
		2472-5757
		
			17
			3
			
			September 2009
			American Institute of Aeronautics and Astronautics (AIAA)
		
	
	Bloem, M., Gupta, P., Kopardekar, P., "Algorithms for Combining Airspace Sectors", Air Traffic Control Quarterly, Vol. 17, No. 3, September 2009.



	
		A Method of Optimally Combining Sectors
		
			MichaelDrew
		
		10.2514/6.2009-7057
	
	
		9th AIAA Aviation Technology, Integration, and Operations Conference (ATIO)
		Hilton Head, SC
		
			American Institute of Aeronautics and Astronautics
			September 2009
		
	
	Drew, M., "A Method of Optimally Combining Sectors", Proceedings of AIAA Aviation Technology, Integration and Operations Conference, Hilton Head, SC, September 2009.



	
		The Multi-Airport Ground-Holding Problem in Air Traffic Control
		
			PeterBVranas
		
		
			DimitrisJBertsimas
		
		
			AmedeoROdoni
		
		10.1287/opre.42.2.249
	
	
		Operations Research
		Operations Research
		0030-364X
		1526-5463
		
			42
			2
			
			March-April 1994
			Institute for Operations Research and the Management Sciences (INFORMS)
		
	
	Vranas, P.B., Bertsimas, D.J., Odoni, A.R., "The Multi-Airport Ground-Holding Problem in Air Traffic Control", Operations Research, Vol. 42, No. 2, pp. 249-261, March-April 1994.



	
		The Air Traffic Flow Management Problem with Enroute Capacities
		
			DimitrisBertsimas
		
		
			SarahStockPatterson
		
		10.1287/opre.46.3.406
	
	
		Operations Research
		Operations Research
		0030-364X
		1526-5463
		
			46
			3
			
			May-June 1998
			Institute for Operations Research and the Management Sciences (INFORMS)
		
	
	Bertsimas, D.J., Stock-Patterson, S., "The Air Traffic Flow Management Problem with Enroute Capacities", Operations Research, Vol. 46, No. 3, pp. 406-422, May-June 1998.



	
		An Integer Optimization Approach to Large-Scale Air Traffic Flow Management
		
			DimitrisBertsimas
		
		
			GuglielmoLulli
		
		
			AmedeoOdoni
		
		10.1287/opre.1100.0899
	
	
		Operations Research
		Operations Research
		0030-364X
		1526-5463
		
			59
			1
			
			2011
			Institute for Operations Research and the Management Sciences (INFORMS)
		
	
	Bertsimas, D., Lulli, G., Odoni A., "An Integer Optimization Approach to Large-Scale Air Traffic Flow Management", Operations Research, Vol. 59, Issue 1, pp. 211-227, 2011.



	
		A distributed scheduler for air traffic flow management
		
			StevenJLandry
		
		
			ToddFarley
		
		
			TyHoang
		
		
			BrianStein
		
		10.1007/s10951-012-0271-3
	
	
		Journal of Scheduling
		J Sched
		1094-6136
		1099-1425
		
			15
			5
			
			October 2012
			Springer Science and Business Media LLC
		
	
	Landry, S.J., Farley, T., Hoang, T., "A Distributed Scheduler for Air Traffic Flow Management", Journal of Scheduling, Vol. 15, Issue 5, pp. 537-551, October 2012.



	
		Massively Parallel Optimal Solution to the Nationwide Traffic Flow Management Problem
		
			MonishDTandale
		
		
			SandyWiraatmadja
		
		
			VeeraVVaddi
		
		
			JosephLRios
		
		10.2514/6.2013-4349
	
	
		2013 Aviation Technology, Integration, and Operations Conference
		Los Angeles, CA
		
			American Institute of Aeronautics and Astronautics
			August 12-14, 2013
		
	
	Tandale, M.D., Wiraatmadja, S., Vaddi,S., Rios, J.L. "Massively Parallel Optimal Solution to the Nationwide Traffic Flow Management Problem", Proceedings of the AIAA Aviation Technology, Integration, and Operations Conference, Los Angeles, CA, August 12-14, 2013.



	
		Equitable and Efficient Coordination in Traffic Flow Management
		
			CynthiaBarnhart
		
		
			DimitrisBertsimas
		
		
			ConstantineCaramanis
		
		
			DouglasFearing
		
		10.1287/trsc.1110.0393
	
	
		Transportation Science
		Transportation Science
		0041-1655
		1526-5447
		
			46
			2
			
			May 2012
			Institute for Operations Research and the Management Sciences (INFORMS)
		
	
	Barnhart, C., Bertsimas, D., Caramanis, C., Fearing, D., "Equitable and Efficient Coordination in Traffic Flow Management", Transportation Science, Vol. 46, No. 2, pp. 262-280, May 2012.



	
		Distributed Flight Routing and Scheduling for Air Traffic Flow Management
		
			YichengZhang
			0000-0001-5979-793X
		
		
			RongSu
			0000-0003-3448-0586
		
		
			QingLi
		
		
			ChristosGCassandras
		
		
			LihuaXie
		
		10.1109/tits.2017.2657550
		
	
	
		IEEE Transactions on Intelligent Transportation Systems
		IEEE Trans. Intell. Transport. Syst.
		1524-9050
		1558-0016
		
			18
			10
			
			30 April, 2017
			Institute of Electrical and Electronics Engineers (IEEE)
		
	
	Zhang, Y., Su, R., Li, Q., Cassandras, C.G., Xie, L., "Distributed Flight Routing and Scheduling for Air Traffic Flow Management", IEEE Transactions on Intelligent Transportation Systems, Early Access Article, Vol. PP, No. 99, pp.1-12, URL: http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7855790&isnumber=4358928, [cited 30 April, 2017].



	
		Approximation algorithms for combinatorial problems
		
			DavidSJohnson
		
		10.1016/s0022-0000(74)80044-9
	
	
		Journal of Computer and System Sciences
		Journal of Computer and System Sciences
		0022-0000
		
			9
			3
			
			December 1974
			Elsevier BV
		
	
	34 Johnson, D.S., "Approximation Algorithms for Combinatorial Problems", Journal of Computer and System Sciences, Vol. 9, Issue 3, pp. 256-278, Elsevier, December 1974.



	
		An Analysis of Several Heuristics for the Traveling Salesman Problem
		
			DanielJRosenkrantz
		
		
			RichardEStearns
		
		
			PhilipMLewis, Ii
		
		10.1137/0206041
	
	
		SIAM Journal on Computing
		SIAM J. Comput.
		0097-5397
		1095-7111
		
			6
			3
			
			1977
			Society for Industrial & Applied Mathematics (SIAM)
		
	
	Rosenkrantz, D.J., Stearns, R.E., Lewis, P.M., "An Analysis of Several Heuristics for the Traveling Salesman Problem", SIAM Journal on Computing, Vol. 6, Issue 3, pp. 568-581, 1977.



	
		Polynomial time approximation schemes for Euclidean traveling salesman and other geometric problems
		
			SanjeevArora
		
		10.1145/290179.290180
	
	
		Journal of the ACM
		J. ACM
		0004-5411
		1557-735X
		
			45
			5
			
			September 1998
			Association for Computing Machinery (ACM)
		
	
	Arora, S., "Polynomial Time Approximation Schemes for Euclidean Traveling Salesman and Other Geometric Problems", Journal of the ACM, Vol. 45, No. 5, pp. 753-782, September 1998.



	
		Clique is hard to approximate within n1−ε
		
			JohanHåstad
		
		10.1007/bf02392825
	
	
		Acta Mathematica
		Acta Math.
		0001-5962
		
			182
			1
			
			1999
			International Press of Boston
		
	
	Håstad, J., "Clique is Hard to Approximate within n 1-e ", Acta Mathematica, Vol. 182, pp. 105-142, 1999.



	
		Assessing Resilience of Scheduled Performance-Based Navigation Arrival Operations
		
			JJung
		
		
			SAVerma
		
		
			SJZelinski
		
		
			TEKozon
		
		
			LSturre
		
	
	
		Eleventh USA/Europe Air Traffic Management Research and Development Seminar (ATM2015)
		Lisbon Portugal
		
			Jun 23-26, 2015
		
	
	Jung, J., Verma, S.A., Zelinski, S.J., Kozon, T.E., Sturre, L., "Assessing Resilience of Scheduled Performance-Based Navigation Arrival Operations", Eleventh USA/Europe Air Traffic Management Research and Development Seminar (ATM2015), Lisbon Portugal, Jun 23-26, 2015.



	
		Development and evaluation of the terminal precision scheduling and spacing system for off-nominal condition operations
		
			HNSwenson
		
		
			Jaewoo Jung
		
		
			JThipphavong
		
		
			Liang Chen
		
		
			LMartin
		
		
			JNguyen
		
		10.1109/dasc.2012.6382303
		
	
	
		2012 IEEE/AIAA 31st Digital Avionics Systems Conference (DASC)
		Williamsburg, VA; Apache Giraph, URL
		
			IEEE
			October 14-18, 2012. 30 April, 2017
			40
			
		
	
	Swenson, H., Jung, J., Thipphavong, J., Chen, L., Martin, L., Nguyen, J., "Development and Evaluation of the Terminal Precision Scheduling and Spacing System for Off-Nominal Condition Operations", 31 st IEEE/AIAA Digital Avionics Systems Conference (DASC), pp. 1-18, Williamsburg, VA, October 14-18, 2012. 40 Apache Giraph, URL: http://giraph.apache.org [cited 30 April, 2017].



	
		ChronoGraph - Versioning Support for OLTP TinkerPop Graphs
		
			MartinHaeusler
		
		
			EmmanuelNowakowski
		
		
			MatthiasFarwick
		
		
			RuthBreu
		
		
			JohannesKessler
		
		
			ThomasTrojer
		
		10.5220/0006465400870097
		
	
	
		Proceedings of the 6th International Conference on Data Science, Technology and Applications
		the 6th International Conference on Data Science, Technology and Applications
		
			SCITEPRESS - Science and Technology Publications
			30 April 2017
		
	
	cited
	41 Apache TinkerPop TM , URL: http://tinkerpop.apache.org [cited 30 April 2017].



	
		Causal Bayesian NetworkX
		
			MichaelPacer
		
		10.25080/majora-7b98e3ed-016
		
	
	
		Proceedings of the 14th Python in Science Conference
		the 14th Python in Science Conference
		
			SciPy
			30 April 2017
		
	
	cited
	42 Python NetworkX, URL: https://networkx.github.io [cited 30 April 2017].



	
		Boost Graph Library, User Guide and Reference Manual
		
			JGSiek
		
		
			L.-QLee
		
		
			December 30, 2001
			Addison-Wesley Professional
		
	
	43 Siek, J.G., Lee, L.-Q., Boost Graph Library, User Guide and Reference Manual, Addison-Wesley Professional, December 30, 2001.



	
		An Algorithm for Geometric Load Balancing with Two Constraints
		
			JKim
		
		
			MPapaefthymious
		
		
			ATayyab
		
	
	
		18 th IEEE International Symposium on Parallel and Distributed Processing
		
			April, 26-30, 2004
			
		
	
	Kim, J., Papaefthymious, M, Tayyab, A., "An Algorithm for Geometric Load Balancing with Two Constraints", 18 th IEEE International Symposium on Parallel and Distributed Processing, pp. 40-48, April, 26-30, 2004.



	
		A decision support system for the electrical power districting problem
		
			PaulKBergey
		
		
			CliffTRagsdale
		
		
			MangeshHoskote
		
		10.1016/s1344-6223(02)00033-0
	
	
		Decision Support Systems
		Decision Support Systems
		0167-9236
		
			36
			1
			
			July 2003
			Elsevier BV
		
	
	Bergey, P.K., Ragsdale, C., T., Hoskote, M., "A Simulated Annealing Genetic Algorithm for the Electric Power Districting Problem", Annals of Operations Research, Vol. 121, Issue 1, pp. 33-55, July 2003.



	
		The sector design and assignment problem for snow disposal operations
		
			NathaliePerrier
		
		
			AndréLangevin
		
		
			JamesFCampbell
		
		10.1016/j.ejor.2007.05.022
	
	
		European Journal of Operational Research
		European Journal of Operational Research
		0377-2217
		
			189
			2
			
			2008
			Elsevier BV
		
	
	Perreira, N., Langevina, A., Campbell, J.F., "The Sector Design and Assignment Problem for Snow Disposal Operations", European Journal of Operations Research, Elsevier, Vol. 189, No. 2, pp. 508-525, 2008.



	
		Determining Optimal Police Patrol Areas with Maximal Covering and Backup Covering Location Models
		
			KevinMCurtin
		
		
			KarenHayslett-Mccall
		
		
			FangQiu
		
		10.1007/s11067-007-9035-6
	
	
		Networks and Spatial Economics
		Netw Spat Econ
		1566-113X
		1572-9427
		
			10
			1
			
			March 2010
			Springer Science and Business Media LLC
		
	
	Curtin, K.M., Hatslett-McCall, K.L., Qui, F., "Determining Optimal Police Patrol Areas with Maximal Covering and Backup Covering Location Models", Networks and Spatial Economics, Springer, Vol. 10, Issue 1, pp. 125-145, March 2010.



	
		<b>BARD</b>: Better Automated Redistricting
		
			MicahAltman
		
		
			MichaelPMcdonald
		
		10.18637/jss.v042.i04
	
	
		Journal of Statistical Software
		J. Stat. Soft.
		1548-7660
		
			42
			4
			
			1997
			Foundation for Open Access Statistic
		
	
	Altman, M., "The Computational Complexity of Automated Redistricting: Is Automation the Answer?", Rutgers Computer and Law Technology Journal, Vol. 23, No. 1, pp. 81-142, 1997.



	
		Sales force deployment models
		
			RSHowick
		
		
			MPidd
		
		10.1016/0377-2217(90)90413-6
	
	
		European Journal of Operational Research
		European Journal of Operational Research
		0377-2217
		
			48
			3
			
			October 1990
			Elsevier BV
		
	
	Howick, R.S., Pidd, M., "Sales Force Deployment Models", European Journal of Operations Research, Elsevier, Vol. 48. No. 3, pp. 295-310, October 1990.



	
		The millennium problems: the seven greatest unsolved mathematical puzzles of our time
		
			KJDevlin
		
		10.5860/choice.41-0977
	
	
		Choice Reviews Online
		Choice Reviews Online
		0009-4978
		1523-8253
		
			41
			02
			41-0977-41-0977
			October 2003
			American Library Association
		
	
	Devlin, K. J., The Millennium Problems: The Seven Greatest Unsolved Mathematical Puzzles of Our Time, Basic Books, October 2003.



	
		The Millennium Prize Problems
		
			AJaffe
		
		
			AWiles
		
		
			JCarlson
		
		
			June 2006. 52
			American Mathematical Society
		
	
	Jaffe, A., Wiles, A., Carlson J., The Millennium Prize Problems, American Mathematical Society, June 2006. 52



	
		Approximation Algorithms
		
			VijayVVazirani
		
		10.1007/978-3-662-04565-7
		
			March 2004
			Springer Berlin Heidelberg
		
	
	Vazirani, V., Approximation Algorithms, Springer, March 2004.



	
		Proof verification and the hardness of approximation problems
		
			SanjeevArora
		
		
			CarstenLund
		
		
			RajeevMotwani
		
		
			MadhuSudan
		
		
			MarioSzegedy
		
		10.1145/278298.278306
	
	
		Journal of the ACM
		J. ACM
		0004-5411
		1557-735X
		
			45
			3
			
			May 1998
			Association for Computing Machinery (ACM)
		
	
	Arora, S., Lund, C., Motwani, R., Sudan, M., Szegedy, M., "Proof Verification and the Hardness of Approximation Problems", Journal of the ACM, Vol. 45, Issue 3, pp. 501-555, May 1998.



	
		The PCP theorem by gap amplification
		
			IritDinur
		
		10.1145/1236457.1236459
	
	
		Journal of the ACM
		J. ACM
		0004-5411
		1557-735X
		
			54
			3
			12
			June 2007
			Association for Computing Machinery (ACM)
		
	
	Dinur, I., "The PCP Theorem by Gap Amplification", Journal of the ACM, Vol. 54, Issue 3, Article 12, June 2007.



	
		10th anniversary ECCC-the electronic colloquium on computational complexity
		
			LTrevisan
		
		10.1109/ccc.2004.1313758
		
	
	
		Proceedings. 19th IEEE Annual Conference on Computational Complexity, 2004.
		19th IEEE Annual Conference on Computational Complexity, 2004
		
			IEEE
			February 22. 2010. June 2017
			65
		
	
	Trevisan, L., "Inapproximability of Combinatorial Optimization Problems", Electronic Colloquium on Computational Complexity, Rev. 1, Report No. 65, February 22, 2010. URL: https://eccc.weizmann.ac.il/report/2004/065 [cited 16, June 2017].



	
		Inapproximability of NP-complete Problems, Discrete Fourier Analysis, and Geometry
		
			SubhashKhot
		
		10.1142/9789814324359_0163
	
	
		Proceedings of the International Congress of Mathematicians 2010 (ICM 2010)
		the International Congress of Mathematicians 2010 (ICM 2010)Seoul, S., Korea
		
			Published by Hindustan Book Agency (HBA), India. WSPC Distribute for All Markets Except in India
			August 13-21, 2014
			1
			
		
	
	Khot, S., "Inapproximability of NP-Complete Problems", Proceedings of the International Congress of Mathematicians, Volume 1, pp. 711-728, Seoul, S., Korea, August 13-21, 2014.


				
			
		
	
